### Starting build.
# Target: openFile.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:openFile.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules openFile.ml > openFile.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o ast.cmo ast.ml
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly
+ ocamlyacc parser.mly
6 rules never reduced
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q scanner.mll
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:semant.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:sast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules sast.ml > sast.ml.depends
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o sast.cmo sast.ml
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 43, characters 6-12:
Warning 26: unused variable void_p.
File "codegen.ml", line 71, characters 6-24:
Warning 26: unused variable global_init_noexpr.
File "codegen.ml", line 77, characters 13-16:
Warning 27: unused variable typ.
File "codegen.ml", line 77, characters 18-21:
Warning 27: unused variable len.
File "codegen.ml", line 99, characters 15-18:
Warning 27: unused variable typ.
File "codegen.ml", line 99, characters 20-23:
Warning 27: unused variable len.
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o semant.cmo semant.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o semant.cmo semant.ml
File "semant.ml", line 137, characters 18-19:
Warning 27: unused variable l.
File "semant.ml", line 153, characters 8-28:
Warning 26: unused variable ex.
File "semant.ml", line 124, characters 10-14:
Warning 26: unused variable ind'.
# Target: openFile.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:openFile.cmo, file:openFile.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o openFile.cmo openFile.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o openFile.cmo openFile.ml
File "openFile.ml", line 10, characters 5-9:
Warning 26: unused variable sast.
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o ast.cmx ast.ml
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o parser.cmx parser.ml
# Target: sast.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o sast.cmx sast.ml
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
File "codegen.ml", line 43, characters 6-12:
Warning 26: unused variable void_p.
File "codegen.ml", line 71, characters 6-24:
Warning 26: unused variable global_init_noexpr.
File "codegen.ml", line 77, characters 13-16:
Warning 27: unused variable typ.
File "codegen.ml", line 77, characters 18-21:
Warning 27: unused variable len.
File "codegen.ml", line 99, characters 15-18:
Warning 27: unused variable typ.
File "codegen.ml", line 99, characters 20-23:
Warning 27: unused variable len.
# Target: scanner.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o semant.cmx semant.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o semant.cmx semant.ml
File "semant.ml", line 137, characters 18-19:
Warning 27: unused variable l.
File "semant.ml", line 153, characters 8-28:
Warning 26: unused variable ex.
File "semant.ml", line 124, characters 10-14:
Warning 26: unused variable ind'.
# Target: openFile.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:openFile.cmx, file:openFile.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o openFile.cmx openFile.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o openFile.cmx openFile.ml
File "openFile.ml", line 10, characters 5-9:
Warning 26: unused variable sast.
# Target: openFile.native, tags: { package(llvm), package(llvm.analysis), dont_link_with, extension:native, file:openFile.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package llvm.analysis -package llvm ast.cmx codegen.cmx parser.cmx sast.cmx scanner.cmx semant.cmx openFile.cmx -o openFile.native
# Compilation successful.
